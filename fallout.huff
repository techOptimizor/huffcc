/// @title Fallback
/// @notice SPDX-License-Identifier: MIT
/// @author mektigboy

/////////////////
/// INTERFACE ///
/////////////////


// // SPDX-License-Identifier: MIT
// pragma solidity ^0.8.0;

// contract Fallback {

//   mapping(address => uint) public contributions;
//   address public owner;

//   constructor() {
//     owner = msg.sender;
//     contributions[msg.sender] = 1000 * (1 ether);
//   }

//   modifier onlyOwner {
//         require(
//             msg.sender == owner,
//             "caller is not the owner"
//         );
//         _;
//     }

//   function contribute() public payable {
//     require(msg.value < 0.001 ether);
//     contributions[msg.sender] += msg.value;
//     if(contributions[msg.sender] > contributions[owner]) {
//       owner = msg.sender;
//     }
//   }

//   function getContribution() public view returns (uint) {
//     return contributions[msg.sender];
//   }

//   function withdraw() public onlyOwner {
//     payable(owner).transfer(address(this).balance);
//   }

//   receive() external payable {
//     require(msg.value > 0 && contributions[msg.sender] > 0);
//     owner = msg.sender;
//   }
// }

#define function contributions(address) nonpayable returns (uint256)
#define function owner() view returns (address)
#define function contribute() payable returns ()
#define function getContribution() nonpayable returns (uint256)
#define function withdraw() nonpayable returns ()

///////////////
/// STORAGE ///
///////////////

#define constant OWNER_SLOT = FREE_STORAGE_POINTER()

/////////////////
/// MODIFIERS ///
/////////////////

/// @notice Modifier to check if the caller is the owner
/// @dev Reverts if the caller is not the owner
#define macro ONLY_OWNER() = takes (0) returns (0) {
    caller                          // [msg.sender]
    [OWNER_SLOT] sload                   // [owner, msg.sender]
    eq                              // [bool]
    authed jumpi

    // Revert if the caller is not the owner
    0x00 0x00 revert

    authed:                    
}

/////////////////////
/// CONTRIBUTIONS ///
/////////////////////

#define macro CONTRIBUTIONS() = takes (0) returns (0) {
    0x04 calldataload               // [key]
    GET_SLOT_FROM_KEY(0x00)         // [slot, key]
    sload                           // [contribution]
    0x00 mstore                     // []
    0x20 0x00 return
}

#define macro GET_CONTRIBUTION() = takes (0) returns (0) {
    caller                          // [msg.sender]
    GET_SLOT_FROM_KEY(0x00)         // [slot, msg.sender]
    sload                           // [contribution]
    0x00 mstore                     // []
    0x20 0x00 return
}

#define macro CONTRIBUTE() = takes (0) returns (0) {
    callvalue                       // [value]
    dup1                            // [value, value]
    0x38d7ea4c68000                 // [100000000000000000, value, value]
    gt                              // [bool, value]
    great_than jumpi                // [value]

    caller                          // [msg.sender, value]
    GET_SLOT_FROM_KEY(0x00)         // [slot, value]
    sstore                          // []

    callvalue                       // [value]
    [OWNER_SLOT] sload              // [slot, value]
    GET_SLOT_FROM_KEY(0x00)         // [slot, value]
    sload                           // [contribution, value]
    lt                              // [bool]
    less_than jumpi                 // []

    stop

    great_than:
        0x00 0x00 revert

    less_than:
        caller                      // [msg.sender]
        [OWNER_SLOT] sstore         // []   

        stop
}

#define macro GET_SLOT_FROM_KEY(pointer) = takes(1) returns (1) {
    // Input stack: [key]
    // Load the data into memory and hash it, while preserving the memory location
    <pointer>                       // [<mem_ptr>, key]
    mstore                          // []

    // Hash the data, generating a key
    0x20                            // [32]
    <pointer>                       // [<mem_ptr>, 32]
    sha3                            // [slot]
}

/////////////
/// OWNER ///
/////////////

/// @notice Get the owner of the contract
/// @return {owner} [address] - The owner of the contract
#define macro OWNER() = takes (0) returns (0) {
    [OWNER_SLOT] sload              // [owner]
    0x00 mstore                     // []
    0x20 0x00 return
}

///////////////////
/// CONSTRUCTOR ///
///////////////////

/// @notice Constructor
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    0x20                            // [size] - Byte size to copy    
    0x20 codesize sub               // [offset, size] - Offset in the code to copy from
    0x00                            // [mem, offset, size] - Offset in memory to copy to
    codecopy                        // []

    0x00 mload                      // [owner]
    [OWNER_SLOT] sstore             // []

    0x3e8                           // [1000]
    0xde0b6b3a7640000               // [1000000000000000000, 1000]
    mul                             // [1000000000000000000000] - 1000 ETH
    0x00 mload                      // [owner, 1000000000000000000000]
    GET_SLOT_FROM_KEY(0x00)         // [slot, 1000000000000000000000]
    sstore                          // []
}

//////////////
/// MACROS ///  
//////////////

#define macro WITHDRAW() = takes (0) returns (0)  {
    ONLY_OWNER()

    0x00 0x00 0x00 0x00             // [0, 0, 0, 0]
    address                         // [address, 0, 0, 0, 0]
    balance                         // [balance, 0, 0, 0, 0]
    [OWNER_SLOT] sload              // [slot, balance, 0, 0, 0, 0]
    gas                             // [gas, owner, balance, 0, 0, 0, 0]
    call                            // [bool]      
    iszero is_zero jumpi            // []

    stop

    is_zero:
        0x00 0x00 revert   
}

///////////////////
/// ENTRY POINT ///
///////////////////

/// @notice Main dispatcher function
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called
    pc calldataload 0xE0 shr

    dup1 __FUNC_SIG(owner) eq ownerJump jumpi
    dup1 __FUNC_SIG(contributions) eq contributionsJump jumpi
    dup1 __FUNC_SIG(getContribution) eq getContributionJump jumpi
    dup1 __FUNC_SIG(contribute) eq contributeJump jumpi
    dup1 __FUNC_SIG(withdraw) eq withdrawJump jumpi

    // Jump into the receive function if `msg.value` is not zero
    0x00                            // [0]
    callvalue                       // [msg.value, 0]
    gt                              // [bool]
    0x00                            // [0, bool]
    caller                          // [msg.sender, 0, bool]
    GET_SLOT_FROM_KEY(0x00)         // [slot, 0, bool]
    sload                           // [contribution, 0, bool]
    gt                              // [bool, bool]
    and                             // []
    receive jumpi

    // Revert if the function is not found
    0x00 0x00 revert

    ownerJump:
        OWNER()
    
    contributionsJump:
        CONTRIBUTIONS()

    getContributionJump:
        GET_CONTRIBUTION()

    contributeJump:
        CONTRIBUTE()

    withdrawJump:
        WITHDRAW()

    receive:
        RECEIVE()
}

///////////////
/// RECEIVE ///
///////////////

#define macro RECEIVE() = {
    caller                      // [msg.sender]
    [OWNER_SLOT] sstore         // []   
}